require File.expand_path(File.join(File.dirname(__FILE__), '..', 'clickhouse'))
Puppet::Type.type(:clickhouse_table).provide(:clickhouse, parent: Puppet::Provider::Clickhouse) do
  desc 'Manages Clickhouse table.'

  commands clickhouse_raw: 'clickhouse-client'

  def self.instances
    clickhouse_caller('show tables').split("\n").map do |name|
      new(name: name,
          ensure: :present)
    end
  end

  # We iterate over each mysql_database entry in the catalog and compare it against
  # the contents of the property_hash generated by self.instances
  def self.prefetch(resources)
    databases = instances
    resources.keys.each do |database|
      provider = databases.find { |db| db.name == database }
      resources[database].provider = provider if provider
    end
  end

  def create
    partition = if defined? (@resource[:partition]) then "partition by #{@resource[:partition]}" else "" end
    order = if defined? (@resource[:order]) then "order by (#{@resource[:order].join(', ')})" else "" end
    self.class.clickhouse_caller("create table if not exists #{@resource[:name]} (#{@resource[:types].join(', ')}) engine = #{@resource[:engine]} #{partition} #{order}")


    @property_hash[:ensure] = :present

    exists? ? (return true) : (return false)
  end

  def destroy
    self.class.clickhouse_caller("drop table if exists #{@resource[:name]}")

    @property_hash.clear
    exists? ? (return false) : (return true)
  end

  def exists?
    @property_hash[:ensure] == :present || false
  end

  mk_resource_methods
end
